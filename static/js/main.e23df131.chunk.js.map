{"version":3,"sources":["img/pokemon-header.png","components/Header.js","components/Searchbar.js","HomePage.js","components/PokeGallery.js","GalleryPage.js","PokemonPage.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","button","textTransform","fontWeight","picButton","fontSize","margin","Header","classes","className","to","alt","src","pokemonHeader","style","color","Button","startIcon","SearchRounded","component","Link","backgroundColor","borderRadius","variant","AppsRounded","SearchBar","searchQuery","setSearchQuery","action","method","borderWidth","borderColor","minHeight","minWidth","value","onInput","e","target","type","id","name","axios","require","search","textAlign","toggles","display","alignItems","justifyContent","paddingTop","pokeCard","maxHeight","maxWidth","cardImg","objectFit","pokeGrid","padding","Home","useState","pokeList","getAllPokemon","order","setDescending","sort","setSort","window","location","query","URLSearchParams","get","pokeNameList","national_id","useEffect","getAllPokemonNames","apiURL","then","response","data","results","catch","error","console","log","length","pokemon","push","replace","match","toUpperCase","sprite","sprite_shiny","url","filteredPokemon","filter","toLowerCase","includes","filterPosts","ToggleButtonGroup","exclusive","onChange","event","ToggleButton","FormControl","InputLabel","Select","label","MenuItem","Grid","container","spacing","a","b","ascend_name","localeCompare","descend_name","ascend_number","descend_number","map","item","textDecoration","Card","lineHeight","_","prep","letter","CardMedia","image","PokeGallery","props","region","region_ref","slice","shiny","displayPokemon","Gallery","setShiny","setRegion","FormControlLabel","control","Checkbox","checked","PokemonPage","pathname","substring","prev_id","Number","next_id","setPokemon","items","setItems","types","setTypes","abilities","setAbilities","stats","setStats","encounters","setEncounters","getPokemonData","pokeURL","location_area_encounters","forEach","element","location_area","ability","desc","effect_entries","effect","held_items","stat","base_stat","direction","xs","maxwidth","CardContent","Typography","gutterBottom","paddingLeft","height","weight","base_experience","encounter","onClick","reload","paddingRight","ArrowBackRounded","ArrowForwardRounded","App","path","exact","Pokemon","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e23df131.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/pokemon-header.562f1d81.png\";","import { Button, makeStyles } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport pokemonHeader from '../img/pokemon-header.png';\r\nimport './Header.css';\r\nimport { SearchRounded, AppsRounded } from \"@material-ui/icons\";\r\n\r\nconst useStyles = makeStyles({\r\n    button: {\r\n        textTransform: 'none',\r\n        fontWeight: 'bold',\r\n    },\r\n    picButton: {\r\n        fontSize: '16px',\r\n        margin: '10px',\r\n    },\r\n})\r\n\r\nfunction Header() {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className=\"header\">\r\n            <Link to=\"/\">\r\n                <img className=\"headerpic\" alt=\"Pokemon\" src={pokemonHeader} />\r\n            </Link>\r\n            <h1 style={{ color: \"#9085c4\" }}>Caleb's National Pokédex</h1>\r\n            <Button\r\n                startIcon={<SearchRounded/>}\r\n                component={Link} to=\"/\"\r\n                style={{backgroundColor: \"#252850\", color: \"#e4e6eb\", borderRadius: 10,}}\r\n                className={`${classes.button} ${classes.picButton}`}\r\n                variant=\"outlined\"\r\n            >\r\n                Search\r\n            </Button>\r\n            <Button\r\n                startIcon={<AppsRounded/>}\r\n                component={Link} to=\"/gallery\"\r\n                style={{backgroundColor: \"#9085c4\", color: \"#e4e6eb\", borderRadius: 10,}}\r\n                className={`${classes.button} ${classes.picButton}`}\r\n                variant=\"outlined\"\r\n            >\r\n                Pokédex\r\n            </Button>\r\n            <br></br>\r\n            <br></br>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;","import { Button } from '@material-ui/core';\r\nimport { SearchRounded } from \"@material-ui/icons\";\r\n\r\n// reference https://www.emgoto.com/react-search-bar/\r\nconst SearchBar = ({ searchQuery, setSearchQuery }) => (\r\n    <form action=\"/\" method=\"get\">\r\n        <input\r\n            style={{borderRadius: '5px', borderWidth: '1.5px', color: '#e4e6eb', borderColor: '#b0b3b8', minHeight: '30px', minWidth: '400px', backgroundColor: '#3d3d3d'}}\r\n            value={searchQuery}\r\n            onInput={e => setSearchQuery(e.target.value)}\r\n            type=\"text\"\r\n            id=\"header-search\"\r\n            name=\"s\" \r\n        />\r\n        <Button style={{color: '#b0b3b8'}} type=\"submit\" startIcon={<SearchRounded/>} />\r\n    </form>\r\n);\r\n\r\nexport default SearchBar;","import { Grid, Card, CardMedia, makeStyles, FormControl, InputLabel, Select, MenuItem } from '@material-ui/core';\r\nimport {ToggleButtonGroup, ToggleButton} from '@mui/material';\r\nimport React, {useState, useEffect} from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Header from './components/Header';\r\nimport SearchBar from './components/Searchbar';\r\n\r\nconst axios = require('axios');\r\nconst apiURL = \"https://pokeapi.co/api/v2/\"\r\n\r\nconst useStyles = makeStyles({\r\n    search: {\r\n        textAlign: 'center',\r\n        color: '#e4e6eb',\r\n    },\r\n    toggles: {\r\n        display: 'flex',\r\n        textAlign: 'center',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        paddingTop: '20px',\r\n        color: '#e4e6eb'\r\n    },\r\n    pokeCard: {\r\n        minWidth: '100px',\r\n        minHeight: '180px',\r\n        maxHeight: '200px',\r\n        maxWidth: '100px',\r\n    },\r\n    cardImg: {\r\n        objectFit: 'contain',\r\n    },\r\n    pokeGrid: {\r\n        padding: '20px',\r\n    }\r\n});\r\n\r\nconst filterPosts = (pokemon, query) => {\r\n    if (!query) {\r\n        return pokemon;\r\n    }\r\n\r\n    return pokemon.filter((pokemon) => {\r\n        const pokemonName = pokemon.name.toLowerCase();\r\n        return pokemonName.includes(query);\r\n    });\r\n};\r\n\r\nfunction Home() {\r\n    const classes = useStyles();\r\n    const [pokeList, getAllPokemon] = useState([]);\r\n    // const [types, setTypes] = useState([]);\r\n    const [order, setDescending] = useState(false);\r\n    const [sort, setSort] = useState(0);\r\n    const { search } = window.location;\r\n    const query = new URLSearchParams(search).get('s');\r\n    const [searchQuery, setSearchQuery] = useState(query || '');\r\n    let pokeNameList = [];\r\n    let national_id = 1;\r\n    // const typeRef = ['bug', 'dark', 'electric', 'fairy', 'fighting', 'flying', 'ghost', 'grass', 'ground', 'ice', \r\n    //                         'normal', 'poison', 'psychic', 'rock', 'steel', 'water'];\r\n\r\n    useEffect(() => {\r\n        getAllPokemonNames();\r\n        // getAllTypes();\r\n    }, []);\r\n\r\n    const handleOrder = (event) => {\r\n        setDescending(event.target.value);\r\n    };\r\n\r\n    const handleSort = (event) => {\r\n        setSort(event.target.value);\r\n    }\r\n\r\n    const getAllPokemonNames = () => {\r\n        const pokeURL = apiURL + \"pokemon/?limit=649\";\r\n        axios.get(pokeURL)\r\n        .then((response) => {\r\n            const pokeList = response.data.results;\r\n            getAllPokemon(pokeList);\r\n        })\r\n        .catch(error => console.log(error))\r\n    }\r\n\r\n    // const getAllTypes = () => {\r\n    //     for(let i = 0; i < 16; i++) {\r\n    //         const pokeURL = apiURL + `type/${typeRef[i]}`;\r\n    //         axios.get(pokeURL)\r\n    //         .then((response) => {\r\n    //             const typeList = response.data.pokemon;\r\n    //             setTypes(types => [...types, typeList]);\r\n    //         })\r\n    //     }\r\n    // }\r\n\r\n    // GET request for all pokemon names has been fetched, state updated\r\n    // create local pokemon array with id, name, sprite\r\n    if(pokeList.length > 0 && pokeList.length < 650) {\r\n        for (const pokemon in pokeList) {\r\n            pokeNameList.push({\r\n                id: national_id, \r\n                name: pokeList[pokemon].name.replace(/(^|[\\s-])\\S/g, function (match) {return match.toUpperCase();}), \r\n                sprite: `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${national_id}.png`,\r\n                sprite_shiny: `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/shiny/${national_id}.png`,\r\n                url: pokeList[pokemon].url,\r\n            });\r\n            national_id++;\r\n        }\r\n    }\r\n    // ).filter(pokemon => types[typeRef.indexOf(\"grass\")].includes({pokemon:{name: pokemon.name, url: pokemon.url}, slot: 1})\r\n\r\n    const filteredPokemon = filterPosts(pokeNameList, searchQuery);\r\n\r\n    return (\r\n        <div style={{backgroundColor: '#18191a', minHeight: '100vh'}}>\r\n            <Header />\r\n            <div className={classes.search}>\r\n                <SearchBar \r\n                    searchQuery={searchQuery}\r\n                    setSearchQuery={setSearchQuery}\r\n                />\r\n            </div>\r\n            <div className={classes.toggles}>\r\n                <ToggleButtonGroup\r\n                    exclusive\r\n                    value={order}\r\n                    style={{backgroundColor: \"#9085c4\", maxHeight: '40px'}}\r\n                    onChange={handleOrder}\r\n                >   \r\n                    <ToggleButton style={{color: '#e4e6eb', minWidth: '40px'}} value={\"ascend\"}>↑</ToggleButton>\r\n                    <ToggleButton style={{color: '#e4e6eb', minWidth: '40px'}} value={\"descend\"}>↓</ToggleButton>\r\n                </ToggleButtonGroup>\r\n                <FormControl variant=\"filled\">\r\n                    <InputLabel style={{color: '#b0b3b8', textAlign: 'center'}}>Sort By</InputLabel>\r\n                        <Select\r\n                            style={{color: '#e4e6eb'}}\r\n                            value={sort}\r\n                            label=\"Sort\"\r\n                            onChange={handleSort}\r\n                        >\r\n                            <MenuItem value={0}>Alphabetical</MenuItem>\r\n                            <MenuItem value={1}>Pokedex ID</MenuItem>\r\n                        </Select>\r\n                </FormControl>\r\n            </div>\r\n            <Grid \r\n            className={classes.pokeGrid} \r\n            container spacing={1}\r\n            justifyContent=\"center\">\r\n                {filteredPokemon.sort((a, b) => {\r\n                    const ascend_name = a.name.localeCompare(b.name);\r\n                    const descend_name = b.name.localeCompare(a.name);\r\n                    const ascend_number = a.id - b.id;\r\n                    const descend_number = b.id - a.id;\r\n                    if(sort) {\r\n                        return (order === 'descend' ? descend_number : ascend_number)  \r\n                    } else {\r\n                        return (order === 'descend' ? descend_name : ascend_name)\r\n                    }\r\n                }\r\n                ).map((data) => {\r\n                    return(\r\n                        <Grid item key={data.id}>\r\n                            <Link style={{textDecoration: 'none'}} to={`pokemon/${data.id}`} id={data.id}>\r\n                                <Card \r\n                                    className={classes.pokeCard}\r\n                                    style={{backgroundColor: '#3d3d3d',}}\r\n                                    variant=\"outlined\">\r\n                                    <p style={{textAlign: 'center', fontSize: '16px', lineHeight: '20px', fontWeight: '500', color: '#e4e6eb'}}>{data.name.replace(/(-|^)([^-]?)/g, function(_, prep, letter) {\r\n                                                    return (prep && ' ') + letter.toUpperCase();\r\n                                                })}</p>\r\n                                    <p style={{textAlign: 'center', fontSize: '12px', lineHeight: '0px', color: '#b0b3b8'}}>#{data.id}</p>\r\n                                    <CardMedia\r\n                                        className={classes.cardImg}\r\n                                        component=\"img\"\r\n                                        image={data.sprite}\r\n                                        alt={data.name}\r\n                                    />\r\n                                </Card>\r\n                            </Link>\r\n                        </Grid>\r\n                    )\r\n                })}\r\n            </Grid>\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default Home;","import React from \"react\";\r\nimport {Grid, Card, CardMedia, makeStyles } from '@material-ui/core';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles({\r\n    pokeCard: {\r\n         maxHeight: '100px',\r\n         maxWidth: '100px',\r\n    },\r\n    cardImg: {\r\n        objectFit: 'contain',\r\n    },\r\n});\r\n\r\nfunction PokeGallery(props) {\r\n    const classes = useStyles();\r\n\r\n    const displayPokemon = (props) => {\r\n        const {pokemon} = props;\r\n        const region = props.region;\r\n        const region_ref = [0, 151, 251, 386, 493, 649, 0, 649];\r\n\r\n        // if props is not empty\r\n        // slice data based on region to sort\r\n        if(pokemon.length > 0) {\r\n            return(\r\n                <Grid \r\n                    justifyContent=\"center\"\r\n                    style={{padding:'15px'}}\r\n                    container spacing={1}>\r\n                {pokemon.slice(region_ref[region-1], region_ref[region]).map((data) => {\r\n                    return(\r\n                        <Grid item key={data.id}>\r\n                            <Link style={{textDecoration: 'none'}} to={`pokemon/${data.id}`} id={data.id}>\r\n                                <Card \r\n                                    className={classes.pokeCard}\r\n                                    variant=\"outlined\"\r\n                                    style={{backgroundColor:'#3d3d3d'}}>\r\n                                    <CardMedia\r\n                                        className={classes.cardImg}\r\n                                        component=\"img\"\r\n                                        image={props.shiny ? data.sprite_shiny : data.sprite}\r\n                                        alt={data.name}\r\n                                    />\r\n                                </Card>\r\n                            </Link>\r\n                        </Grid>\r\n                    )\r\n                })}    \r\n                </Grid>\r\n            )\r\n        }\r\n    }\r\n\r\n    return(\r\n        <>\r\n            {displayPokemon(props)}\r\n        </>\r\n    )\r\n}\r\n\r\n// proptype check that pokemon passed in is an array of objects\r\nPokeGallery.propTypes = {\r\n    pokemon: PropTypes.array,\r\n    shiny: PropTypes.bool,\r\n    region: PropTypes.number,\r\n};\r\n\r\nexport default PokeGallery;","import { InputLabel, Select, FormControl, MenuItem, FormControlLabel, Checkbox, makeStyles } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react';\r\nimport Header from './components/Header';\r\nimport PokeGallery from './components/PokeGallery';\r\n\r\nconst axios = require('axios');\r\nconst apiURL = \"https://pokeapi.co/api/v2/\";\r\n\r\nconst useStyles = makeStyles({\r\n    toggles: {\r\n        display: 'flex',\r\n        textAlign: 'center',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        paddingTop: '15px',\r\n    },\r\n    region: {\r\n        minWidth: 100,\r\n    },\r\n});\r\n\r\nfunction Gallery() {\r\n    const classes = useStyles();\r\n\r\n    const [pokeList, getAllPokemon] = useState('');\r\n    const [shiny, setShiny] = useState(false);\r\n    const [region, setRegion] = useState(7);\r\n\r\n    useEffect(() => {\r\n        getAllPokemonNames();\r\n    }, []);\r\n\r\n    const handleShiny = () => {\r\n        setShiny(!shiny);\r\n    };\r\n\r\n    const handleRegion = (event) => {\r\n        setRegion(event.target.value);\r\n    }\r\n\r\n    const getAllPokemonNames = () => {\r\n        const pokeURL = apiURL + \"pokemon/?limit=809\";\r\n        axios.get(pokeURL)\r\n        .then((response) => {\r\n            const pokeList = response.data.results;\r\n            getAllPokemon(pokeList);\r\n        })\r\n        .catch(error => console.log(error))\r\n    }\r\n\r\n    // GET request for all pokemon names has been fetched, state updated\r\n    let pokeNameList = [];\r\n    let national_id = 1;\r\n    // create local pokemon array with id, name, sprite\r\n    if(pokeList.length > 0 && pokeList.length < 810) {\r\n        for (const pokemon in pokeList) {\r\n            pokeNameList.push({\r\n                id: national_id, \r\n                name: pokeList[pokemon].name.replace(/(^|[\\s-])\\S/g, function (match) {return match.toUpperCase();}), \r\n                sprite: `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${national_id}.png`,\r\n                sprite_shiny: `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/shiny/${national_id}.png`,\r\n            });\r\n            national_id++;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div style={{backgroundColor:'#18191a', minHeight: '100vh'}}>\r\n            <Header />\r\n            <div className={classes.toggles}>\r\n                <FormControlLabel\r\n                    style={{color: '#b0b3b8'}}\r\n                    control={<Checkbox style={{color: '#9085c4'}} checked={shiny} \r\n                    onChange={handleShiny} />}\r\n                    label=\"Shiny\" />\r\n                <FormControl variant=\"filled\" className={classes.region}>\r\n                    <InputLabel style={{color: '#b0b3b8', textAlign: 'center'}}>Region</InputLabel>\r\n                        <Select\r\n                            value={region}\r\n                            label=\"Region\"\r\n                            style={{color: '#e4e6eb'}}\r\n                            onChange={handleRegion}\r\n                        >\r\n                            <MenuItem value={7}>All Regions</MenuItem>\r\n                            <MenuItem value={1}>Kanto</MenuItem>\r\n                            <MenuItem value={2}>Johto</MenuItem>\r\n                            <MenuItem value={3}>Hoenn</MenuItem>\r\n                            <MenuItem value={4}>Sinnoh</MenuItem>\r\n                            <MenuItem value={5}>Unova</MenuItem>\r\n                        </Select>\r\n                </FormControl>\r\n            </div>\r\n            <PokeGallery pokemon={pokeNameList} shiny={shiny} region={region} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Gallery;","import React, { useState, useEffect } from \"react\";\r\nimport {CardContent, Typography, Grid, Card, makeStyles, FormControlLabel, Checkbox } from '@material-ui/core';\r\nimport { Link } from 'react-router-dom';\r\nimport Header from './components/Header';\r\nimport { ArrowBackRounded, ArrowForwardRounded } from \"@material-ui/icons\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst axios = require('axios');\r\nconst apiURL = \"https://pokeapi.co/api/v2/\";\r\n\r\nconst useStyles = makeStyles({\r\n    container: {\r\n        textAlign: 'center',\r\n        backgroundColor: '#3d3d3d',\r\n    }\r\n});\r\n\r\n\r\nfunction PokemonPage(props) {\r\n    const classes = useStyles();\r\n    const id = props.location.pathname.substring(9);\r\n    let prev_id = '' + (Number(id) - 1);\r\n    if (prev_id < 1) prev_id = 649;\r\n    let next_id = '' + (Number(id) + 1);\r\n    if (next_id > 649) next_id = 1;\r\n\r\n    const [pokemon, setPokemon] = useState('');\r\n    const [items, setItems] = useState([]);\r\n    const [types, setTypes] = useState([]);\r\n    const [abilities, setAbilities] = useState([]);\r\n    const [stats, setStats] = useState([]);\r\n    const [encounters, setEncounters] = useState([]);\r\n    const [shiny, setShiny] = useState(false);\r\n\r\n    useEffect(() => {\r\n        getPokemonData();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    const handleShiny = () => {\r\n        setShiny(!shiny);\r\n    };\r\n\r\n\r\n    const getPokemonData = () => {\r\n        const pokeURL = apiURL + `pokemon/${id}`;\r\n        axios.get(pokeURL)\r\n        .then((response) => {\r\n            setPokemon(response.data);\r\n            axios.get(response.data.location_area_encounters)\r\n            .then((response => {\r\n                response.data.forEach(function(element) {\r\n                    setEncounters(encounters => [...encounters, element.location_area.name]);\r\n                })\r\n            }))\r\n            response.data.types.forEach(function(element) {\r\n\t\t\t\tsetTypes(types => [...types, element.type.name]);\r\n\t\t\t});\r\n            response.data.abilities.forEach(function(element) {\r\n\t\t\t\t\r\n                axios.get(element.ability.url)\r\n                .then((response) => {\r\n                    setAbilities(abilities => [...abilities, {name: element.ability.name, desc: response.data.effect_entries[1].effect}]);\r\n                })\r\n\t\t\t});\r\n            response.data.held_items.forEach(function(element) {\r\n                setItems(items => [...items, element.item.name]);\r\n            });\r\n            response.data.stats.forEach(function(element) {\r\n                setStats(stats => [...stats, {name: element.stat.name, stat: element.base_stat}]);\r\n            });\r\n        })\r\n        .catch(error => console.log(error))\r\n    }\r\n\r\n    return(\r\n        <div style={{backgroundColor: '#18191a', minHeight: '100vh'}} >\r\n            <Header/>\r\n            <Grid\r\n                container\r\n                spacing={3}\r\n                direction=\"row\"\r\n                alignItems=\"center\"\r\n                justifyContent=\"center\"\r\n            >\r\n                <Grid item xs={6}>\r\n                    <Card className={classes.container} variant=\"outlined\" maxwidth=\"lg\">\r\n                        <h1 style={{lineHeight: '15px', color: '#e4e6eb'}}>{pokemon ? pokemon.name.replace(/(-|^)([^-]?)/g, function(_, prep, letter) {\r\n                                                    return (prep && ' ') + letter.toUpperCase();\r\n                                                }) : ''}</h1>\r\n                        <div>\r\n                                {types.map((type) => {\r\n                                    return <img key={type} src={`./${type}.png`} alt={type} />\r\n                                })}\r\n                        </div>\r\n                        <h3 style={{fontWeight: '500', color: '#b0b3b8', lineHeight: '5px'}}>#{pokemon.id}</h3>\r\n                        <div style={{display: 'flex', justifyContent: 'center'}}>\r\n                            <div>\r\n                                <img src={shiny ? `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/shiny/${id}.png` : `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${id}.png`} alt={pokemon.name}/>\r\n                                <p style={{lineHeight: '0px', color: '#b0b3b8'}}>Front</p>\r\n                            </div>\r\n\r\n                            <div>\r\n                                <img src={shiny ? `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/back/shiny/${id}.png` : `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/back/${id}.png`} alt={pokemon.name}/>\r\n                                <p style={{lineHeight: '0px', color: '#b0b3b8'}}>Back</p>\r\n                            </div>\r\n                        </div>\r\n                        <FormControlLabel\r\n                        style={{color: '#b0b3b8'}}\r\n                        control={<Checkbox style={{color: '#9085c4'}} checked={shiny} \r\n                        onChange={handleShiny} />}\r\n                        label={shiny ? 'Shiny' : 'Base'} />\r\n\r\n                        <CardContent style={{margin: '30px'}}>\r\n                            <Grid\r\n                                container\r\n                                spacing={3}\r\n                                direction=\"row\"\r\n                                justifyContent=\"center\"\r\n                            >\r\n                                <Grid item xs={6}>\r\n                                    <Typography style={{lineHeight: '15px', color: '#e4e6eb'}} gutterBottom variant=\"h6\" component=\"div\">\r\n                                        Base Stats\r\n                                    </Typography>\r\n                                    <Typography style={{color: '#e4e6eb', textAlign: 'left', fontSize: '16px', paddingLeft: '40px', lineHeight: '5px'}} variant=\"body2\" component=\"div\">\r\n                                            <p><span style={{fontWeight: 'bold'}}>Height:</span> {pokemon.height}</p>\r\n                                            <p><span style={{fontWeight: 'bold'}}>Weight:</span> {pokemon.weight}</p>\r\n                                            <p><span style={{fontWeight: 'bold'}}>XP:</span> {pokemon.base_experience}</p>\r\n                                            {stats.map(stat => (\r\n                                                <p key={stat.name}><span style={{fontWeight: 'bold'}}>{stat.name.replace(/(-|^)([^-]?)/g, function(_, prep, letter) {\r\n                                                    return (prep && ' ') + letter.toUpperCase();\r\n                                                })}:</span> {stat.stat}</p>\r\n                                            ))}\r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <Typography style={{lineHeight: '15px', color: '#e4e6eb'}} gutterBottom variant=\"h6\" component=\"div\">\r\n                                        Held Items\r\n                                    </Typography>\r\n                                    <div style={{minHeight:'40px', paddingTop: '30px'}}>\r\n                                        {items.map((item) => {\r\n                                            return (item ? <img key={item} src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/items/${item}.png`} alt={item} /> : <p key={item}></p>);\r\n                                        })}\r\n                                    </div>\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <Typography style={{lineHeight: '15px', color: '#e4e6eb'}} gutterBottom variant=\"h6\" component=\"div\">\r\n                                        Abilities\r\n                                    </Typography>\r\n                                    <Typography style={{color: '#e4e6eb', textAlign: 'left', fontSize: '16px'}} variant=\"body2\" component=\"div\">\r\n                                        <ul>\r\n                                            {abilities.map(ability => (\r\n                                                <li key={ability.name}><span style={{fontWeight: 'bold'}}>{ability.name.replace(/(-|^)([^-]?)/g, function(_, prep, letter) {\r\n                                                    return (prep && ' ') + letter.toUpperCase();\r\n                                                })}:</span> {ability.desc}</li>\r\n                                            ))}\r\n                                        </ul>\r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <Typography style={{lineHeight: '15px', color: '#e4e6eb'}} gutterBottom variant=\"h6\" component=\"div\">\r\n                                        Location Areas\r\n                                    </Typography>\r\n                                    <Typography style={{color: '#e4e6eb', textAlign: 'left', fontSize: '16px'}} variant=\"body2\" component=\"div\">\r\n                                        <ul>\r\n                                            {encounters.map(encounter => (\r\n                                                <li key={encounter.name}>{encounter == null ? '' : encounter.replace(/(-|^)([^-]?)/g, function(_, prep, letter) {\r\n                                                    return (prep && ' ') + letter.toUpperCase();\r\n                                                })}</li>\r\n                                            ))}\r\n                                        </ul>\r\n                                    </Typography>\r\n                                </Grid>\r\n\r\n                            </Grid>\r\n                        </CardContent>\r\n                    </Card>\r\n                </Grid>   \r\n            </Grid>\r\n            <div style={{display: 'flex', justifyContent: 'center'}} onClick={() => window.location.reload()}>\r\n                <div style={{paddingRight: '50px'}}>\r\n                        <Link to={`${prev_id}`} style={{textDecoration: 'none'}}>\r\n                            <div style={{ textAlign: 'right' }}>\r\n                                <ArrowBackRounded style={{color: '#9085c4'}} />\r\n                                <p style={{fontWeight: '500', lineHeight: '0px', paddingRight: '5px', color: '#CBC3E3'}}>#{prev_id}</p>\r\n                            </div>\r\n                        </Link>\r\n                </div>\r\n                    \r\n                <div style={{paddingLeft: '5    0px'}}>\r\n                    <Link to={`${next_id}`} style={{textDecoration: 'none'}}>\r\n                        <div style={{color: '#252850'}}>\r\n                            <ArrowForwardRounded style={{color: '#9085c4'}}/>\r\n                            <p style={{fontWeight: '500', lineHeight: '0px', paddingLeft: '5px', color: '#CBC3E3'}}>#{next_id}</p>\r\n                        </div>\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nPokemonPage.propTypes = {\r\n    location : PropTypes.objectOf(String),\r\n};\r\n\r\nexport default PokemonPage;","import React from 'react';\r\nimport './App.css';\r\nimport { Switch, Route, HashRouter as Router } from 'react-router-dom';\r\nimport Home from './HomePage';\r\nimport Gallery from './GalleryPage';\r\nimport Pokemon from './PokemonPage';\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route path=\"/\" exact component={Home} />\r\n        <Route path=\"/gallery\" exact component={Gallery} />\r\n        <Route path=\"/pokemon/:id\" exact component={Pokemon} />\r\n    </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render( \r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}